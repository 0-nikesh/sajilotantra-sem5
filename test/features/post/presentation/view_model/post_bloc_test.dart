import 'package:bloc_test/bloc_test.dart';
import 'package:dartz/dartz.dart' show Right, Left, unit;
import 'package:dartz/dartz.dart'; // Assuming you're using dartz for Either
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';
import 'package:sajilotantra/core/error/failure.dart';
import 'package:sajilotantra/features/post/domain/entity/post_entity.dart';
import 'package:sajilotantra/features/post/domain/use_case/add_comment_usecase.dart';
import 'package:sajilotantra/features/post/domain/use_case/crearte_posts_usecase.dart';
import 'package:sajilotantra/features/post/domain/use_case/fetch_posts_usecase.dart';
import 'package:sajilotantra/features/post/domain/use_case/get_post_by_id.dart';
import 'package:sajilotantra/features/post/domain/use_case/like_posts_usecase.dart';
import 'package:sajilotantra/features/post/presentation/view_model/post_bloc.dart';
import 'package:sajilotantra/features/post/presentation/view_model/post_event.dart';
import 'package:sajilotantra/features/post/presentation/view_model/post_state.dart';

import 'post_bloc_test.mocks.dart'; // Generated by Mockito

@GenerateMocks([
  FetchPostsUseCase,
  LikePostUseCase,
  AddCommentUseCase,
  CreatePostUseCase,
  GetPostByIdUseCase,
])
void main() {
  late PostBloc postBloc;
  late MockFetchPostsUseCase mockFetchPostsUseCase;
  late MockLikePostUseCase mockLikePostUseCase;
  late MockAddCommentUseCase mockAddCommentUseCase;
  late MockCreatePostUseCase mockCreatePostUseCase;
  late MockGetPostByIdUseCase mockGetPostByIdUseCase;

  setUp(() {
    mockFetchPostsUseCase = MockFetchPostsUseCase();
    mockLikePostUseCase = MockLikePostUseCase();
    mockAddCommentUseCase = MockAddCommentUseCase();
    mockCreatePostUseCase = MockCreatePostUseCase();
    mockGetPostByIdUseCase = MockGetPostByIdUseCase();

    postBloc = PostBloc(
      fetchPostsUseCase: mockFetchPostsUseCase,
      likePostUseCase: mockLikePostUseCase,
      addCommentUseCase: mockAddCommentUseCase,
      createPostUseCase: mockCreatePostUseCase,
      getPostByIdUseCase: mockGetPostByIdUseCase,
    );
  });

  tearDown(() {
    postBloc.close();
  });

  // Sample data
  var post = PostEntity(
    id: '1',
    caption: 'Test Caption',
    category: 'General',
    images: const ['image1.jpg'],
    likeCount: 0,
    comments: [
      CommentEntity(
          user: 'user123', text: 'Nice post!', createdAt: DateTime(2025, 3, 5))
    ],
    userId: 'user123',
    username: 'Test User',
    userImage: 'user_image.jpg',
    createdAt: DateTime(2025, 3, 5),
  );
  final postsList = [post];

  group('PostBloc', () {
    // Test FetchPostsEvent
    blocTest<PostBloc, PostState>(
      'emits [PostLoading, PostLoaded] when FetchPostsEvent is successful',
      build: () {
        when(mockFetchPostsUseCase()).thenAnswer(
          (_) async => Right(postsList),
        );
        return postBloc;
      },
      act: (bloc) => bloc.add(FetchPostsEvent()),
      expect: () => [
        PostLoading(),
        PostLoaded(posts: postsList),
      ],
    );

    blocTest<PostBloc, PostState>(
      'emits [PostLoading, PostError] when FetchPostsEvent fails',
      build: () {
        when(mockFetchPostsUseCase()).thenAnswer(
          (_) async =>
              const Left(ApiFailure(message: 'Fetch failed', statusCode: 500)),
        );
        return postBloc;
      },
      act: (bloc) => bloc.add(FetchPostsEvent()),
      expect: () => [
        PostLoading(),
        const PostError(message: 'Fetch failed'),
      ],
    );

    // Test LikePostEvent
    blocTest<PostBloc, PostState>(
      'emits [PostLoading, PostLiked, PostLoading, PostLoaded] when LikePostEvent is successful',
      build: () {
        when(mockLikePostUseCase('1')).thenAnswer(
          (_) async => const Right(unit),
        );
        when(mockFetchPostsUseCase()).thenAnswer(
          (_) async => Right(postsList),
        );
        return postBloc;
      },
      act: (bloc) => bloc.add(const LikePostEvent(postId: '1')),
      expect: () => [
        PostLoading(),
        PostLiked(),
        PostLoading(),
        PostLoaded(posts: postsList),
      ],
    );

    blocTest<PostBloc, PostState>(
      'emits [PostLoading, PostError] when LikePostEvent fails',
      build: () {
        when(mockLikePostUseCase('1')).thenAnswer(
          (_) async =>
              const Left(ApiFailure(message: 'Like failed', statusCode: 400)),
        );
        return postBloc;
      },
      act: (bloc) => bloc.add(const LikePostEvent(postId: '1')),
      expect: () => [
        PostLoading(),
        const PostError(message: 'Like failed'),
      ],
    );

    // Test AddCommentEvent
    blocTest<PostBloc, PostState>(
      'emits [PostLoading, CommentAdded, PostLoading, PostLoaded] when AddCommentEvent is successful',
      build: () {
        when(mockAddCommentUseCase('1', 'Nice post!')).thenAnswer(
          (_) async => const Right(unit),
        );
        when(mockFetchPostsUseCase()).thenAnswer(
          (_) async => Right(postsList),
        );
        return postBloc;
      },
      act: (bloc) => bloc
          .add(const AddCommentEvent(postId: '1', commentText: 'Nice post!')),
      expect: () => [
        PostLoading(),
        CommentAdded(),
        PostLoading(),
        PostLoaded(posts: postsList),
      ],
    );

    blocTest<PostBloc, PostState>(
      'emits [PostLoading, PostError] when AddCommentEvent fails',
      build: () {
        when(mockAddCommentUseCase('1', 'Nice post!')).thenAnswer(
          (_) async => const Left(
              ApiFailure(message: 'Comment failed', statusCode: 400)),
        );
        return postBloc;
      },
      act: (bloc) => bloc
          .add(const AddCommentEvent(postId: '1', commentText: 'Nice post!')),
      expect: () => [
        PostLoading(),
        const PostError(message: 'Comment failed'),
      ],
    );

    blocTest<PostBloc, PostState>(
      'emits [PostLoading, PostError] when CreatePostEvent fails',
      build: () {
        when(mockCreatePostUseCase(post)).thenAnswer(
          (_) async =>
              const Left(ApiFailure(message: 'Create failed', statusCode: 400)),
        );
        return postBloc;
      },
      act: (bloc) => bloc.add(CreatePostEvent(post: post)),
      expect: () => [
        PostLoading(),
        const PostError(message: 'Create failed'),
      ],
    );
  });
}
