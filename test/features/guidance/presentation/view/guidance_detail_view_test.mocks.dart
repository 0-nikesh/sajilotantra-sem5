// Mocks generated by Mockito 5.4.5 from annotations
// in sajilotantra/test/features/guidance/presentation/view/guidance_detail_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:bloc/bloc.dart' as _i10;
import 'package:dartz/dartz.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sajilotantra/core/error/failure.dart' as _i11;
import 'package:sajilotantra/features/guidance/domain/entity/guidance_entity.dart'
    as _i12;
import 'package:sajilotantra/features/guidance/domain/repository/guidance_repository.dart'
    as _i5;
import 'package:sajilotantra/features/guidance/domain/use_case/get_all_guidance_usecase.dart'
    as _i2;
import 'package:sajilotantra/features/guidance/domain/use_case/get_guidance_by_id_usecase.dart'
    as _i3;
import 'package:sajilotantra/features/guidance/presentation/view_model/guidance_bloc.dart'
    as _i7;
import 'package:sajilotantra/features/guidance/presentation/view_model/guidance_event.dart'
    as _i9;
import 'package:sajilotantra/features/guidance/presentation/view_model/guidance_state.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetAllGuidancesUseCase_0 extends _i1.SmartFake
    implements _i2.GetAllGuidancesUseCase {
  _FakeGetAllGuidancesUseCase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetGuidanceByIdUseCase_1 extends _i1.SmartFake
    implements _i3.GetGuidanceByIdUseCase {
  _FakeGetGuidanceByIdUseCase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGuidanceState_2 extends _i1.SmartFake implements _i4.GuidanceState {
  _FakeGuidanceState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIGuidanceRepository_3 extends _i1.SmartFake
    implements _i5.IGuidanceRepository {
  _FakeIGuidanceRepository_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_4<L, R> extends _i1.SmartFake implements _i6.Either<L, R> {
  _FakeEither_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GuidanceBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockGuidanceBloc extends _i1.Mock implements _i7.GuidanceBloc {
  MockGuidanceBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetAllGuidancesUseCase get getAllGuidancesUseCase => (super.noSuchMethod(
        Invocation.getter(#getAllGuidancesUseCase),
        returnValue: _FakeGetAllGuidancesUseCase_0(
          this,
          Invocation.getter(#getAllGuidancesUseCase),
        ),
      ) as _i2.GetAllGuidancesUseCase);

  @override
  _i3.GetGuidanceByIdUseCase get getGuidanceByIdUseCase => (super.noSuchMethod(
        Invocation.getter(#getGuidanceByIdUseCase),
        returnValue: _FakeGetGuidanceByIdUseCase_1(
          this,
          Invocation.getter(#getGuidanceByIdUseCase),
        ),
      ) as _i3.GetGuidanceByIdUseCase);

  @override
  _i4.GuidanceState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeGuidanceState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.GuidanceState);

  @override
  _i8.Stream<_i4.GuidanceState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i8.Stream<_i4.GuidanceState>.empty(),
      ) as _i8.Stream<_i4.GuidanceState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i9.GuidanceEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i9.GuidanceEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i4.GuidanceState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i9.GuidanceEvent>(
    _i10.EventHandler<E, _i4.GuidanceState>? handler, {
    _i10.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i10.Transition<_i9.GuidanceEvent, _i4.GuidanceState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void onChange(_i10.Change<_i4.GuidanceState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GetAllGuidancesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllGuidancesUseCase extends _i1.Mock
    implements _i2.GetAllGuidancesUseCase {
  MockGetAllGuidancesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.IGuidanceRepository get guidanceRepository => (super.noSuchMethod(
        Invocation.getter(#guidanceRepository),
        returnValue: _FakeIGuidanceRepository_3(
          this,
          Invocation.getter(#guidanceRepository),
        ),
      ) as _i5.IGuidanceRepository);

  @override
  _i8.Future<_i6.Either<_i11.Failure, List<_i12.GuidanceEntity>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i8
            .Future<_i6.Either<_i11.Failure, List<_i12.GuidanceEntity>>>.value(
            _FakeEither_4<_i11.Failure, List<_i12.GuidanceEntity>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i8.Future<_i6.Either<_i11.Failure, List<_i12.GuidanceEntity>>>);
}

/// A class which mocks [GetGuidanceByIdUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetGuidanceByIdUseCase extends _i1.Mock
    implements _i3.GetGuidanceByIdUseCase {
  MockGetGuidanceByIdUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.IGuidanceRepository get guidanceRepository => (super.noSuchMethod(
        Invocation.getter(#guidanceRepository),
        returnValue: _FakeIGuidanceRepository_3(
          this,
          Invocation.getter(#guidanceRepository),
        ),
      ) as _i5.IGuidanceRepository);

  @override
  _i8.Future<_i6.Either<_i11.Failure, _i12.GuidanceEntity?>> call(
          _i3.GetGuidanceByIdParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i8.Future<_i6.Either<_i11.Failure, _i12.GuidanceEntity?>>.value(
                _FakeEither_4<_i11.Failure, _i12.GuidanceEntity?>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i8.Future<_i6.Either<_i11.Failure, _i12.GuidanceEntity?>>);
}
