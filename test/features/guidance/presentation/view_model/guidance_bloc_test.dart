import 'package:bloc_test/bloc_test.dart';
import 'package:dartz/dartz.dart' show Right, Left;
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';
import 'package:sajilotantra/core/error/failure.dart'; // Assuming your Failure is here
import 'package:sajilotantra/features/guidance/domain/entity/guidance_entity.dart';
import 'package:sajilotantra/features/guidance/domain/use_case/get_all_guidance_usecase.dart';
import 'package:sajilotantra/features/guidance/domain/use_case/get_guidance_by_id_usecase.dart';
import 'package:sajilotantra/features/guidance/presentation/view_model/guidance_bloc.dart';
import 'package:sajilotantra/features/guidance/presentation/view_model/guidance_event.dart';
import 'package:sajilotantra/features/guidance/presentation/view_model/guidance_state.dart';

import 'guidance_bloc_test.mocks.dart'; // Generated by Mockito

@GenerateMocks([GetAllGuidancesUseCase, GetGuidanceByIdUseCase])
void main() {
  late GuidanceBloc guidanceBloc;
  late MockGetAllGuidancesUseCase mockGetAllGuidancesUseCase;
  late MockGetGuidanceByIdUseCase mockGetGuidanceByIdUseCase;

  setUp(() {
    mockGetAllGuidancesUseCase = MockGetAllGuidancesUseCase();
    mockGetGuidanceByIdUseCase = MockGetGuidanceByIdUseCase();
    guidanceBloc = GuidanceBloc(
      getAllGuidancesUseCase: mockGetAllGuidancesUseCase,
      getGuidanceByIdUseCase: mockGetGuidanceByIdUseCase,
    );
  });

  tearDown(() {
    guidanceBloc.close();
  });

  // Sample data using your GuidanceEntity
  var guidance = GuidanceEntity(
    id: 'guidance123',
    title: 'Test Guidance',
    description: 'This is a test guidance description',
    thumbnail: 'thumbnail.jpg',
    category: 'General',
    documentsRequired: const ['document1.pdf', 'document2.pdf'],
    costRequired: '100.00',
    userId: 'user123',
    createdAt: DateTime(2025, 3, 5),
  );
  final guidancesList = [guidance];

  group('GuidanceBloc', () {
    // Test LoadAllGuidancesEvent success
    blocTest<GuidanceBloc, GuidanceState>(
      'emits [GuidanceLoadingState, GuidanceLoadedState] when LoadAllGuidancesEvent is successful',
      build: () {
        when(mockGetAllGuidancesUseCase.call()).thenAnswer(
          (_) async => Right(guidancesList),
        );
        return guidanceBloc;
      },
      act: (bloc) => bloc.add(LoadAllGuidancesEvent()),
      expect: () => [
        GuidanceLoadingState(),
        GuidanceLoadedState(guidances: guidancesList),
      ],
    );

    // Test LoadAllGuidancesEvent failure
    blocTest<GuidanceBloc, GuidanceState>(
      'emits [GuidanceLoadingState, GuidanceErrorState] when LoadAllGuidancesEvent fails',
      build: () {
        when(mockGetAllGuidancesUseCase.call()).thenAnswer(
          (_) async =>
              const Left(ApiFailure(message: 'Failed to load guidances')),
        );
        return guidanceBloc;
      },
      act: (bloc) => bloc.add(LoadAllGuidancesEvent()),
      expect: () => [
        GuidanceLoadingState(),
        GuidanceErrorState(message: 'Failed to load guidances'),
      ],
    );

    // Test LoadGuidanceDetailsEvent success
    blocTest<GuidanceBloc, GuidanceState>(
      'emits [GuidanceLoadingState, GuidanceDetailsLoadedState] when LoadGuidanceDetailsEvent is successful',
      build: () {
        when(mockGetGuidanceByIdUseCase.call(any)).thenAnswer(
          (_) async => Right(guidance),
        );
        return guidanceBloc;
      },
      act: (bloc) =>
          bloc.add(LoadGuidanceDetailsEvent(guidanceId: 'guidance123')),
      expect: () => [
        GuidanceLoadingState(),
        GuidanceDetailsLoadedState(guidance: guidance),
      ],
    );

    // Test LoadGuidanceDetailsEvent failure
    blocTest<GuidanceBloc, GuidanceState>(
      'emits [GuidanceLoadingState, GuidanceErrorState] when LoadGuidanceDetailsEvent fails',
      build: () {
        when(mockGetGuidanceByIdUseCase.call(any)).thenAnswer(
          (_) async => const Left(
              ApiFailure(message: 'Failed to load guidance details')),
        );
        return guidanceBloc;
      },
      act: (bloc) =>
          bloc.add(LoadGuidanceDetailsEvent(guidanceId: 'guidance123')),
      expect: () => [
        GuidanceLoadingState(),
        GuidanceErrorState(message: 'Failed to load guidance details'),
      ],
    );
  });
}
