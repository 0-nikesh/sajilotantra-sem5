// Mocks generated by Mockito 5.4.5 from annotations
// in sajilotantra/test/features/guidance/presentation/view_model/guidance_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sajilotantra/core/error/failure.dart' as _i6;
import 'package:sajilotantra/features/guidance/domain/entity/guidance_entity.dart'
    as _i7;
import 'package:sajilotantra/features/guidance/domain/repository/guidance_repository.dart'
    as _i2;
import 'package:sajilotantra/features/guidance/domain/use_case/get_all_guidance_usecase.dart'
    as _i4;
import 'package:sajilotantra/features/guidance/domain/use_case/get_guidance_by_id_usecase.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIGuidanceRepository_0 extends _i1.SmartFake
    implements _i2.IGuidanceRepository {
  _FakeIGuidanceRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetAllGuidancesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllGuidancesUseCase extends _i1.Mock
    implements _i4.GetAllGuidancesUseCase {
  MockGetAllGuidancesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IGuidanceRepository get guidanceRepository => (super.noSuchMethod(
        Invocation.getter(#guidanceRepository),
        returnValue: _FakeIGuidanceRepository_0(
          this,
          Invocation.getter(#guidanceRepository),
        ),
      ) as _i2.IGuidanceRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.GuidanceEntity>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.GuidanceEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.GuidanceEntity>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.GuidanceEntity>>>);
}

/// A class which mocks [GetGuidanceByIdUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetGuidanceByIdUseCase extends _i1.Mock
    implements _i8.GetGuidanceByIdUseCase {
  MockGetGuidanceByIdUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IGuidanceRepository get guidanceRepository => (super.noSuchMethod(
        Invocation.getter(#guidanceRepository),
        returnValue: _FakeIGuidanceRepository_0(
          this,
          Invocation.getter(#guidanceRepository),
        ),
      ) as _i2.IGuidanceRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.GuidanceEntity?>> call(
          _i8.GetGuidanceByIdParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i7.GuidanceEntity?>>.value(
                _FakeEither_1<_i6.Failure, _i7.GuidanceEntity?>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.GuidanceEntity?>>);
}
